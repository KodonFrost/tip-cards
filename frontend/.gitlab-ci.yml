# ------------- VARIABLES
# configure them in https://gitlab.satoshiengineering.com/satoshiengineering/lightning-tip-cards/-/settings/ci_cd
# - FRONTEND_DEPLOY_SERVER_MAIN
# - FRONTEND_DEPLOY_SERVER_DEVELOP
# - FRONTEND_DEPLOY_PATH_MAIN
# - FRONTEND_DEPLOY_PATH_DEVELOP
# - TEST_ORIGIN_MAIN
# - TEST_ORIGIN_DEVELOP

# ------------- BASE CONFIG OF THE JOBS
.frontend-base_config:
  extends: .base_config
  cache:
    key: "frontend-$CI_COMMIT_REF_SLUG"
    paths:
      - frontend/.npm
      - frontend/node_modules

# Create Artifact with current ref or tag name (using the slug)
.frontend-artifacts_config:
  artifacts:
    name: "frontend-$CI_COMMIT_REF_SLUG"
    paths: 
      - dist

# ------------- STAGE SETUP
frontend-setup:
  stage: setup
  extends: .frontend-base_config
  cache:
    policy: pull-push # Upload the cache after it's done
  script:
    - cd frontend
    - npm ci --cache .npm --prefer-offline

# ------------- STAGE TEST
frontend-audit:
  stage: test
  extends: .frontend-base_config
  script:
    - cd frontend
    - npm audit

# ------------- STAGE DEPLOY (& BUILD)
frontend-build:
  stage: deploy
  extends:
    - .frontend-base_config
    - .frontend-artifacts_config
  script:
    - cd frontend
    - npm run build

.frontend-deploy_config:
  image: alpine  
  stage: deploy
  needs: [frontend-build]
  variables:
    NODE_ENV: production  
  extends:
    - .frontend-base_config
    - .frontend-artifacts_config
  cache: {} # Disable Cache
  before_script:
    - cd frontend
    - apk update && apk add openssh-client rsync
    - mkdir ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no" >> ~/.ssh/config
    - cat ~/.ssh/config
    - eval $(ssh-agent -s)
    - echo "$DEPLOY_USER_SSH_KEY" | ssh-add -  
  script:
    - |  
      if [ "$CI_COMMIT_BRANCH" == "main" ]
      then 
        echo "Deploying on Environment Main"
        export DEPLOY_SERVER=$FRONTEND_DEPLOY_SERVER_MAIN
        export DEPLOY_PATH=$FRONTEND_DEPLOY_PATH_MAIN
      elif [ "$CI_COMMIT_BRANCH" == "develop" ]
      then
        echo "Deploying on Environment Develop"
        export DEPLOY_SERVER=$FRONTEND_DEPLOY_SERVER_DEVELOP
        export DEPLOY_PATH=$FRONTEND_DEPLOY_PATH_DEVELOP
      else
        echo "ERROR: this branch $CI_COMMIT_BRANCH is not allowed to run this job! Wake up your devops team!"
        exit 1
      fi
    - echo "Deploying with user $DEPLOY_USER on server $DEPLOY_SERVER to path $DEPLOY_PATH"
    - cd frontend
    # 1) RSYNC Dist
    - rsync -atv --delete --progress ./dist $DEPLOY_USER@$DEPLOY_SERVER:$DEPLOY_PATH
    # 2) Remove old dist-previous dir
    - ssh $DEPLOY_USER@$DEPLOY_SERVER "rm -rf $DEPLOY_PATH/dist-previous"
    # 3) Save current dist to previous
    - ssh $DEPLOY_USER@$DEPLOY_SERVER "if [ -d $DEPLOY_PATH/dist-www ]; then mv $DEPLOY_PATH/dist-www $DEPLOY_PATH/dist-previous; fi"
    # 4) Make new dist available
    - ssh $DEPLOY_USER@$DEPLOY_SERVER "mv $DEPLOY_PATH/dist $DEPLOY_PATH/dist-www"

frontend-deploy-develop:
  extends:
  - .deploy_config
  environment:
    name: develop
  rules:
    - if: $CI_COMMIT_BRANCH != 'develop'
      when: never
    - !reference [.base_config, rules] # Reference is needed, because the rules "array" is not merged with extends

frontend-deploy-main:
  extends:
  - .deploy_config
  environment:
    name: main
  rules:
    - if: $CI_COMMIT_BRANCH != 'main'
      when: never  
    - !reference [.base_config, rules] # Reference is needed, because the rules "array" is not merged with extends

# ------------- STAGE CLEANUP
frontend-cleanup:
  image: alpine
  stage: cleanup
  extends: .frontend-base_config 
  script:
    - echo "Cleaning up the cache"
    - rm -rf "%CACHE_PATH%/%CI_PIPELINE_ID%"
  when: on_success

# ------------- STAGE INTEGRATION
frontend-test-integration:
  stage: integration
  services:
    - name: selenium/standalone-chrome
      alias: selenium-chrome
  cache: {} # Disable Cache
  variables:
    NODE_ENV: test
  rules:
    - !reference [.deployable_branches_rules, rules]
    # Exclude other schedules
    - if: $CI_PIPELINE_SOURCE == 'schedule' && $SCHEDULE_JOB != 'NIGHTLY_INTEGRATION'
      when: never
    # Only run the job if its manual (web), commit push or scheduled
    - if: $CI_PIPELINE_SOURCE == 'web' || $CI_PIPELINE_SOURCE == 'push' || $CI_PIPELINE_SOURCE == 'schedule'
      when: on_success
    - when: never
  script:
    - |
      if [ "$CI_COMMIT_BRANCH" == "main" ]
      then 
        echo "Running on Main Branch"
        echo "TEST_ORIGIN=$TEST_ORIGIN_MAIN" > .env.test.local
      elif [ "$CI_COMMIT_BRANCH" == "develop" ]
      then
        echo "Running on develop Branch"
        echo "TEST_ORIGIN=$TEST_ORIGIN_DEVELOP" > .env.test.local
      else
        echo "ERROR: this branch $CI_COMMIT_BRANCH is not allowed to run this job! Wake up your devops team!"
        exit 1
      fi
    - echo "Running Intergration Test on branch $CI_COMMIT_BRANCH with url $TEST_ORIGIN"
    - cd frontend
    - npm ci --include=dev
    - npm run test-integration
